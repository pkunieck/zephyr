# 1rtos-container-image-build.yml
# Container CD Workflow - PR Event
#
# Builds new main.stg container image from source & tags main.stg.
# Runs Trivy CVS scan then ALL twister default test-cases on production infra
#
name: container-image-build
concurrency: 1rtos_container_cd
on:
  pull_request:
    branches:
      - main-intel
  workflow_dispatch:

jobs:
# Build container image from repo source, tagging with '.stg' to prevent conflicts.
# This step runs on CI TestHead where most container dev/testing occurs
  buildAndStageImage:
    runs-on: testhead
    steps:
      - uses: actions/checkout@v2
      - run: |
          set       
          chmod 777 entrypoint.sh
          docker build --build-arg UID=$(id -u) --build-arg GID=$(id -g) --build-arg HTTPPROXY=$http_proxy --build-arg HTTPSPROXY=$https_proxy --build-arg NOPROXY=$no_proxy -t 127.0.0.1:5000/sdk-docker-intel:main.stg .
          docker push 127.0.0.1:5000/sdk-docker-intel:main.stg
        shell: bash
# Run aquasecurity/trivy-action for CRITICAL CVEs, will block CI
  scanImageCritical:
    runs-on: testhead
    needs: [ buildAndStageImage ]
    steps:
      - uses: actions/checkout@v2
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '127.0.0.1:5000/sdk-docker-intel:main.stg'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL'

# Run aquasecurity/trivy-action for HIGH CVEs, does not gate CI
  scanImageHigh:
    runs-on: testhead
    needs: [ buildAndStageImage ]
    steps:
      - uses: actions/checkout@v2
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '127.0.0.1:5000/sdk-docker-intel:main.stg'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'HIGH'

# now run twister, using the -B option along with matrix expansion to distribute workload
  runTwister:
    runs-on: uzdo128
    needs: [ scanImageCritical ]
    defaults:
      run:
        shell: bash
    container:
      image: 192.168.0.200:5000/sdk-docker-intel:main.stg
      options: --user root:root -v/opt/toolchains:/opt/toolchains
    strategy:
      matrix:
        batch: [1, 2, 3]
        batch_total: [ 3 ] 
    steps:
      - name: checkout zephyr ci-self-test tag
        uses: actions/checkout@v2
        with:
          path: 'zephyrproject/zephyr'
          repository: 'intel-innersource/os.rtos.zephyr.zephyr.git'
          ref: '1rtos-ci-self-test' 
          token: ${{ secrets.PAT_SYS_TMBUILD_SDK_DOCKER_INTEL }}
      - name: 1rtos-ci
        run: /opt/1rtos/container-api.sh 1rtos-ci $GITHUB_WORKSPACE ${{ matrix.batch }} ${{ matrix.batch_total }}
      - name: log artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: twisterLog_${{ matrix.batch }}of${{ matrix.batch_total }}
          path: |
            zephyrproject/zephyr/twister-out/twister.log
            zephyrproject/zephyr/twister-out/twister.xml
          retention-days: 1               

# "OneRTOS-CI-Passed" is our exit job that matches branch-protection status-check
# settings for PR workflow. Make sure all required tests are prereqs to this job.
# For this build workflow, no actions are taken by OneRTOS-CI-Passed, just status
# echo.
  OneRTOS-CI-Passed:
    needs: [ buildAndStageImage, scanImageCritical, runTwister ]
    runs-on: testhead
    steps:
      - name: Post run steps
        run: echo "OneRTOS-CI-Passsed"
