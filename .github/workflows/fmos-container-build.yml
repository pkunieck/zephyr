# fmos-container-image-build.yml
# Container Image CD Workflow - PR Event
#
# 1. Builds new main.stg container image from source, tagging as 'main.stg'
# 2. Scans new image for CRITICAL CVEs with Trivy and if passes, pushes to registry
# 3. Verifies twister passes all default test-cases, executing on production builders
# 4. Returns overall workflow status for PR check

name: container-image-build
concurrency: fmos_container_cd
on:
  pull_request:
    branches:
      - main-intel
  workflow_dispatch:

env:
  registry: 'amr-registry.caas.intel.com'
  project: 'zephyrproject'

jobs:
  buildScanAndStageImage:
# Build container image from repo source, tagging with '.stg' to avoid conflicting with production
#   This step can run on our 'fmos-ubuntu-latest' VMs as the task is mostly downloading not compiling
    runs-on: fmos-ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
      - name: build new main.stg container image
        run: |
          chmod 777 entrypoint.sh
          docker rmi '${{ env.registry }}/${{ env.project }}/sdk-docker-intel:main.stg' || true
          docker build --build-arg UID=$(id -u) --build-arg GID=$(id -g) \
            --build-arg HTTPPROXY=$http_proxy --build-arg HTTPSPROXY=$https_proxy --build-arg NOPROXY=$no_proxy \
            -t '${{ env.registry }}/${{ env.project }}/sdk-docker-intel:main.stg' .
      - name: CVE scan new main.stg image
        uses: intel-innersource/os.rtos.zephyr.devops.ci/actions/trivy-cve-scan@main
        with:
          container-url: '${{ env.registry }}/${{ env.project }}/sdk-docker-intel:main.stg'
          cve-level: 'CRITICAL'
      - name: push main.stg container image to registry
        run: |
          echo '${{ secrets.CAAS_PRODUCTION_BOT_PASSWD }}' | docker login -u '${{ secrets.CAAS_PRODUCTION_BOT_USERNAME }}' --password-stdin ${{ env.registry }} && \
          docker push '${{ env.registry }}/${{ env.project }}/sdk-docker-intel:main.stg'
      - name: registry logout
        if: ${{ always() }}
        run: |
          docker logout ${{ env.registry }}
          docker logout
          true

# Now run we verify new container functionality by running a full twister run on production infrastructure
#   For fastest execution, we parallel execute these compute-intensive steps on our 'uzdo-hpc' build farm
  ciSelfTest:
    needs: buildScanAndStageImage
    uses: intel-innersource/os.rtos.zephyr.devops.ci/.github/workflows/fmos-ci-self-test.yml@main
    with:
      container: amr-registry.caas.intel.com/zephyrproject/sdk-docker-intel:main.stg
      runner: uzdo128
    secrets:
      token: ${{ secrets.PAT_SYS_TMBUILD_SDK_DOCKER_INTEL }}

# "OneRTOS-CI-Passed" is our exit job that matches branch-protection status-check
# settings for PR workflow. Make sure all required tests are prereqs to this job.
# For this build workflow, no actions are taken by OneRTOS-CI-Passed, just status
# echo.
  ciSelfTestPassed:
    needs: [ buildScanAndStageImage, ciSelfTest ]
    runs-on: fmos-ubuntu-latest
    steps:
      - name: Post run steps
        run: echo "ciSelfTest Passed"
